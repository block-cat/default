{"version":3,"sources":["webpack://@block-cat/default/webpack/bootstrap","webpack://@block-cat/default/external \"flarum.core.compat['extend']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/IndexPage']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/DiscussionListItem']\"","webpack://@block-cat/default/external \"flarum.core.compat['utils/PostControls']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/Dropdown']\"","webpack://@block-cat/default/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@block-cat/default/external \"flarum.core.compat['helpers/listItems']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/Navigation']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/LinkButton']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/CommentPost']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/Post']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/PostStream']\"","webpack://@block-cat/default/./src/forum/settings/addEMoldovaButton.js","webpack://@block-cat/default/./src/forum/settings/removePane.js","webpack://@block-cat/default/./src/forum/index.js","webpack://@block-cat/default/./src/forum/settings/changePaths.js","webpack://@block-cat/default/./src/forum/settings/changeIconFromMenu.js","webpack://@block-cat/default/./src/forum/settings/removeLeftsideMenu.js","webpack://@block-cat/default/./src/forum/settings/removeToolbar.js","webpack://@block-cat/default/./src/forum/settings/removeActionItems.js","webpack://@block-cat/default/./src/forum/settings/removeRightsideMenu.js","webpack://@block-cat/default/./src/forum/settings/removeSidebarItems.js","webpack://@block-cat/default/./src/forum/settings/changePostControls.js","webpack://@block-cat/default/./src/forum/settings/removePostCount.js","webpack://@block-cat/default/./src/forum/settings/removeReplyPlaceholder.js","webpack://@block-cat/default/./src/forum/settings/removeTerminalPost.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","extend","Navigation","view","JSON","parse","app","forum","attribute","emoldovaButton","history","canGoBack","$","find","length","remove","children","unshift","text","translator","trans","class","href","title","active","type","target","onclick","confirm","getEMoldovaButton","append","initializers","add","routes","routesCustom","data","resources","attributes","keys","map","path","IndexPage","items","defaultSettings","params","search","stickyParams","allDiscussionsIcon","has","replace","LinkButton","component","route","icon","mainPageMenu","toolbar","shift","refreshButton","markAllAsReadButton","DiscussionPage","discussionMenu","controlsButton","scrubberDiv","CommentPost","controls","PostControls","this","attrs","post","discussionControlsToPost","number","discussionData","relationships","discussion","store","getById","id","discussionModerationControls","DiscussionControls","moderationControls","merge","postControlsUp","className","toArray","buttonClassName","menuClassName","onshow","addClass","onhide","removeClass","override","Post","original","elementAttrs","classes","join","content","listItems","actionItems","footerItems","DiscussionListItem","postCount","pop","addEMoldovaButton","PostStream","postReply","discuss","terminalPost","pane","disable","element"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/IndexPage'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['components/DiscussionListItem'];","module.exports = flarum.core.compat['utils/PostControls'];","module.exports = flarum.core.compat['components/Dropdown'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['helpers/listItems'];","module.exports = flarum.core.compat['components/Navigation'];","module.exports = flarum.core.compat['components/LinkButton'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['components/Post'];","module.exports = flarum.core.compat['components/PostStream'];","/*\r\n * This function add button to emoldova.org on header on main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport Navigation from 'flarum/components/Navigation';\r\n\r\n// This is emoldova.org button\r\nfunction getEMoldovaButton() {\r\n  // message for confirm\r\n  let text = app.translator.trans('block-cat-default.forum.confirm_exit_message');\r\n\r\n  return (\r\n    <a class=\"Button Button--icon hasIcon\"\r\n      href=\"https://emoldova.org/\" title=\"e-Moldova\"\r\n      active=\"false\" type=\"button\" target=\"_self\"\r\n      onclick={() => {return confirm(text);}}>\r\n      <i class=\"icon fas fa-home Button-icon\"></i>\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default function () {\r\n  extend(Navigation.prototype, 'view', function(view) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    \r\n    // check if is set '1' for EMoldova button\r\n    if (defaultSettings.emoldovaButton) {\r\n      const { history } = app;\r\n\r\n      // check if is on Main Page\r\n      if (!history.canGoBack()) {\r\n        if (view.children) { // check if 'view' has children\r\n          view.children.unshift(getEMoldovaButton());\r\n        } else { // if 'view' hasn't children\r\n          // message for confirm\r\n          let text = app.translator.trans('block-cat-default.forum.confirm_exit_message');\r\n\r\n          // check if button not exists\r\n          if ($('#header-navigation > .Navigation.ButtonGroup').find('a > .fas.fa-home').length == 0) {\r\n            $('#header-navigation > .Navigation.ButtonGroup').append(\r\n              '<a class=\"Button Button--icon hasIcon\"\\\r\n                href=\"https://emoldova.org/\"\\\r\n                title=\"e-Moldova\"\\\r\n                active=\"false\"\\\r\n                type=\"button\"\\\r\n                target=\"_self\"\\\r\n                onclick=\"return confirm(\\'' + text +'\\')\">\\\r\n                  <i class=\"icon fas fa-home Button-icon\"></i>\\\r\n                </a>'\r\n            );\r\n          }\r\n        }\r\n      } else { // if is not on Main Page, should remove button\r\n        if ($('#header-navigation > .Navigation.ButtonGroup').find('a > .fas.fa-home').length == 1) {\r\n          $('a[title=\"e-Moldova\"]').remove();\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes leftside pane on discussion page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionPage from 'flarum/components/DiscussionPage';\r\n\r\nexport default function () {\r\n  extend(DiscussionPage.prototype, 'oninit', function() {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    \r\n    // check if is set '1' for pane\r\n    if (defaultSettings.pane) {\r\n      // disable pin button for pane \r\n      app.pane.disable();\r\n    }\r\n  });\r\n\r\n  extend(DiscussionPage.prototype, 'oncreate', function() {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    \r\n    // check if is set '1' for pane\r\n    if (defaultSettings.pane) {\r\n      for (const i of this.element.children) {\r\n        // check classname for pane\r\n        if (i.className === 'DiscussionPage-list') {\r\n            // remove pane with discussions list\r\n            i.remove();\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n","import addEMoldovaButton from './settings/addEMoldovaButton';\r\nimport changeIconFromMenu from './settings/changeIconFromMenu';\r\nimport changePostControls from './settings/changePostControls';\r\nimport removeActionItems from './settings/removeActionItems';\r\nimport removeLeftsideMenu from './settings/removeLeftsideMenu';\r\nimport removePane from './settings/removePane';\r\nimport removePostCount from './settings/removePostCount';\r\nimport removeReplyPlaceholder from './settings/removeReplyPlaceholder';\r\nimport removeRightsideMenu from './settings/removeRightsideMenu';\r\nimport removeSidebarItems from './settings/removeSidebarItems';\r\nimport removeTerminalPost from './settings/removeTerminalPost';\r\nimport removeToolbar from './settings/removeToolbar';\r\nimport changePaths from './settings/changePaths';\r\n\r\napp.initializers.add('block-cat/default', () => {\r\n  changePaths();\r\n  changeIconFromMenu();\r\n  removeLeftsideMenu();\r\n  removeToolbar();\r\n  removeActionItems();\r\n  removeRightsideMenu();\r\n  removeSidebarItems();\r\n  changePostControls();\r\n  removePostCount();\r\n  addEMoldovaButton();\r\n  removeReplyPlaceholder();\r\n  removeTerminalPost();\r\n  removePane();\r\n}, -20);\r\n","export default function () {\r\n    // get all used Flarum routes\r\n    const routes = app.routes;\r\n    // get all routes defined in admin page\r\n    const routesCustom = JSON.parse(app.data.resources[0].attributes[\"block-cat.defaultRoutes\"]);\r\n    \r\n    // map all keys from Flarum routes\r\n    Object.keys(routes).map((key) => {\r\n        // check if key is specified in admin page\r\n        if (routesCustom.hasOwnProperty(key)) {\r\n            // check if key from admin page has value\r\n            if (routesCustom[key].path !== \"\") {\r\n                // set new path for specific key\r\n                app.routes[key].path = routesCustom[key].path;\r\n            }\r\n        }\r\n    });\r\n};\r\n","/*\r\n * This function change icon in sidebar menu for 'allDiscussions'\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport IndexPage from 'flarum/components/IndexPage';\r\nimport LinkButton from 'flarum/components/LinkButton';\r\n\r\nexport default function () {\r\n  extend(IndexPage.prototype, 'navItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    const params = app.search.stickyParams();\r\n    \r\n    // check if is set icon for main page menu\r\n    if (defaultSettings.allDiscussionsIcon !== \"\") {\r\n      // check if exists 'allDiscussions' item\r\n      if (items.has('allDiscussions')) {\r\n        // change 'allDiscussions' item\r\n        items.replace(\r\n          'allDiscussions',\r\n          LinkButton.component(\r\n            {\r\n              href: app.route('index', params),\r\n              // change the icon...\r\n              icon: defaultSettings.allDiscussionsIcon,\r\n            },\r\n            app.translator.trans('core.forum.index.all_discussions_link')\r\n          ),\r\n          100\r\n        );\r\n      }\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes leftside menu from main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport IndexPage from 'flarum/components/IndexPage';\r\n\r\nexport default function () {\r\n  extend(IndexPage.prototype, 'sidebarItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for main page menu\r\n    if (defaultSettings.mainPageMenu) {\r\n      // check if exists 'nav' item\r\n      if (items.has('nav')) {\r\n        // remove 'nav' item\r\n        items.remove('nav');\r\n      }\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes tools bar from top of\r\n * discussions list on main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport IndexPage from 'flarum/components/IndexPage';\r\n\r\nexport default function () {\r\n  extend(IndexPage.prototype, 'view', function(view) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for toolbar\r\n    if (defaultSettings.toolbar) {\r\n      // remove first element from 'view.children[1].children[0].children[1].children'\r\n      view.children[1].children[0].children[1].children.shift();\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes refresh button and\r\n * mark all as read button from top of\r\n * discussions list on main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport IndexPage from 'flarum/components/IndexPage';\r\n\r\nexport default function () {\r\n  extend(IndexPage.prototype, 'actionItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for refresh button\r\n    if (defaultSettings.refreshButton) {\r\n      // check if exists 'refresh' item\r\n      if (items.has('refresh')) {\r\n        // remove 'refresh' item\r\n        items.remove('refresh');\r\n      }\r\n    }\r\n    // check if is set '1' for mark all as read button\r\n    if (defaultSettings.markAllAsReadButton) {\r\n      // check if exists 'markAllAsRead' item\r\n      if (items.has('markAllAsRead')) {\r\n        // remove 'markAllAsRead' item\r\n        items.remove('markAllAsRead');\r\n      }\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes rightside menu from discussion page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionPage from 'flarum/components/DiscussionPage';\r\n\r\nexport default function () {\r\n  extend(DiscussionPage.prototype, 'view', function(view) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    \r\n    // check if is set '1' for dicussion page menu\r\n    if (defaultSettings.discussionMenu) {\r\n      try {\r\n        // remove first element from 'view.children[1].children[1].children'\r\n        view.children[1].children[1].children.shift();\r\n      } catch {}\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes blue button from\r\n * rightside from discussion page and\r\n * what is below to this\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionPage from 'flarum/components/DiscussionPage';\r\n\r\nexport default function () {\r\n  extend(DiscussionPage.prototype, 'sidebarItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for controls button\r\n    if (defaultSettings.controlsButton) {\r\n      // check if exists 'controls' item\r\n      if (items.has('controls')) {\r\n        // remove 'controls' item\r\n        items.remove('controls');\r\n      }\r\n    }\r\n    // check if is set '1' for timeline\r\n    if (defaultSettings.scrubberDiv) {\r\n      // check if exists 'scrubber' item\r\n      if (items.has('scrubber')) {\r\n        // remove 'scrubber' item\r\n        items.remove('scrubber');\r\n      }\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function duplicates Post Controls on header\r\n * if posts are very large and merge Discussion Controls\r\n * with Post Controls for first post in discussion\r\n */\r\n\r\nimport { extend, override } from 'flarum/extend';\r\nimport CommentPost from 'flarum/components/CommentPost';\r\nimport PostControls from 'flarum/utils/PostControls';\r\nimport Dropdown from 'flarum/components/Dropdown';\r\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\r\nimport Post from 'flarum/components/Post';\r\nimport listItems from 'flarum/helpers/listItems';\r\n\r\nexport default function () {\r\n  extend(CommentPost.prototype, 'headerItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    // get all PostControls\r\n    const controls = PostControls.controls(this.attrs.post, this);\r\n\r\n    // check if is set '1' for mergging controls\r\n    if (defaultSettings.discussionControlsToPost) {\r\n      // check if is first post\r\n      if (this.attrs.post.number() === 1) {\r\n        // get type and id of discussion from post info\r\n        const discussionData = this.attrs.post.data.relationships.discussion.data;\r\n        // get current discussion from Flarum API\r\n        const discussion = app.store.getById(discussionData.type, discussionData.id);\r\n        // get moderation controls for current discussion\r\n        const discussionModerationControls = DiscussionControls.moderationControls(discussion);\r\n        \r\n        // remove unneeded controls for discussion\r\n      discussionModerationControls.has('lock') ? discussionModerationControls.remove('lock') : '';\r\n      discussionModerationControls.has('sticky') ? discussionModerationControls.remove('sticky') : '';\r\n\r\n      // change icon for 'rename' control\r\n      discussionModerationControls.has('rename') ? discussionModerationControls.get('rename').attrs.icon = 'fas fa-heading' : '';\r\n\r\n      // merge all controls in one list\r\n      controls.merge(discussionModerationControls);\r\n      }\r\n    }\r\n\r\n    // check if is set '1' for duplication\r\n    if (defaultSettings.postControlsUp) {\r\n      // add item 'controls' on post header\r\n      // like in original Flarum code\r\n      items.add(\r\n        'controls',\r\n        <aside className=\"Post-actions-top\">\r\n          <ul>\r\n            {controls.toArray().length ? (\r\n              <li>\r\n                <Dropdown\r\n                  className=\"Post-controls-h\"\r\n                  buttonClassName=\"Button Button--icon Button--flat\"\r\n                  menuClassName=\"Dropdown-menu--right\"\r\n                  icon=\"fas fa-ellipsis-h\"\r\n                  onshow={() => this.$(\".Post-actions-top\").addClass(\"open\")}\r\n                  onhide={() => this.$(\".Post-actions-top\").removeClass(\"open\")}\r\n                >\r\n                  {controls.toArray()}\r\n                </Dropdown>\r\n              </li>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </ul>\r\n        </aside>\r\n      );\r\n    }\r\n  });\r\n\r\n  override(Post.prototype, 'view', function(original) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    // code from Flarum\r\n    const attrs = this.elementAttrs();\r\n    attrs.className = this.classes(attrs.className).join(' ');\r\n    // get all PostControls\r\n    const controls = PostControls.controls(this.attrs.post, this);\r\n\r\n    // check if is set '1' for mergging controls\r\n    if (defaultSettings.discussionControlsToPost) {\r\n      // check if is first post\r\n      if (this.attrs.post.number() === 1) {\r\n        // get type and id of discussion from post info\r\n        const discussionData = this.attrs.post.data.relationships.discussion.data;\r\n        // get current discussion from Flarum API\r\n        const discussion = app.store.getById(discussionData.type, discussionData.id);\r\n        // get moderation controls option for current discussion\r\n        const discussionModerationControls = DiscussionControls.moderationControls(discussion);\r\n        \r\n        // remove unneeded controls for discussion\r\n      discussionModerationControls.has('lock') ? discussionModerationControls.remove('lock') : '';\r\n      discussionModerationControls.has('sticky') ? discussionModerationControls.remove('sticky') : '';\r\n\r\n      // change icon for 'rename' control\r\n      discussionModerationControls.has('rename') ? discussionModerationControls.get('rename').attrs.icon = 'fas fa-heading' : '';\r\n\r\n      // merge all controls in one list\r\n      controls.merge(discussionModerationControls);\r\n      }\r\n\r\n      // return result\r\n      // like in original Flarum code\r\n      return (\r\n        <article {...attrs}>\r\n          <div>\r\n            {this.content()}\r\n            <aside className=\"Post-actions\">\r\n              <ul>\r\n                {listItems(this.actionItems().toArray())}\r\n                {controls.toArray().length ? (\r\n                  <li>\r\n                    <Dropdown\r\n                      className=\"Post-controls\"\r\n                      buttonClassName=\"Button Button--icon Button--flat\"\r\n                      menuClassName=\"Dropdown-menu--right\"\r\n                      icon=\"fas fa-ellipsis-h\"\r\n                      onshow={() => this.$('.Post-actions').addClass('open')}\r\n                      onhide={() => this.$('.Post-actions').removeClass('open')}\r\n                    >\r\n                      {controls.toArray()}\r\n                    </Dropdown>\r\n                  </li>\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </ul>\r\n            </aside>\r\n            <footer className=\"Post-footer\">\r\n              <ul>{listItems(this.footerItems().toArray())}</ul>\r\n            </footer>\r\n          </div>\r\n        </article>\r\n      );\r\n    } else {\r\n      // if is set '0' for mergging controls\r\n      // return original Flarum code\r\n      return original();\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes number of posts\r\n * from every discussion on main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionListItem from 'flarum/components/DiscussionListItem';\r\n\r\nexport default function () {\r\n  extend(DiscussionListItem.prototype, 'view', function(view) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for post count\r\n    if (defaultSettings.postCount) {\r\n      // remove last element from 'view.children[2].children'\r\n      view.children[2].children.pop();\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes area for posting from end of posts on discussion page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport PostStream from 'flarum/components/PostStream';\r\n\r\nexport default function () {\r\n  extend(PostStream.prototype, 'view', function(view) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for post reply\r\n    if (defaultSettings.postReply) {\r\n      // map all children of 'view'\r\n      view.children.map((discuss) => {\r\n        // check if exists post with key 'reply'\r\n        if (discuss.key === 'reply') {\r\n          // remove last element from 'view.children'\r\n          view.children.pop();\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes last action info from every discussion on main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionListItem from 'flarum/components/DiscussionListItem';\r\n\r\nexport default function () {\r\n  extend(DiscussionListItem.prototype, 'infoItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for terminal post\r\n    if (defaultSettings.terminalPost) {\r\n      // check if exists 'terminalPost' item\r\n      if (items.has('terminalPost')) {\r\n        // remove 'terminalPost' item\r\n        items.remove('terminalPost');\r\n      }\r\n    }\r\n  });\r\n};\r\n"],"sourceRoot":""}