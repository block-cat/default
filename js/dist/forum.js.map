{"version":3,"sources":["webpack://@block-cat/default/webpack/bootstrap","webpack://@block-cat/default/external \"flarum.core.compat['extend']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/IndexPage']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/DiscussionListItem']\"","webpack://@block-cat/default/external \"flarum.core.compat['utils/PostControls']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/Dropdown']\"","webpack://@block-cat/default/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@block-cat/default/external \"flarum.core.compat['helpers/listItems']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/Navigation']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/LinkButton']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/CommentPost']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/Post']\"","webpack://@block-cat/default/external \"flarum.core.compat['components/PostStream']\"","webpack://@block-cat/default/./src/forum/settings/addEMoldovaButton.js","webpack://@block-cat/default/./src/forum/settings/removePane.js","webpack://@block-cat/default/./src/forum/index.js","webpack://@block-cat/default/./src/forum/settings/changeIconFromMenu.js","webpack://@block-cat/default/./src/forum/settings/removeLeftsideMenu.js","webpack://@block-cat/default/./src/forum/settings/removeToolbar.js","webpack://@block-cat/default/./src/forum/settings/removeActionItems.js","webpack://@block-cat/default/./src/forum/settings/removeRightsideMenu.js","webpack://@block-cat/default/./src/forum/settings/removeSidebarItems.js","webpack://@block-cat/default/./src/forum/settings/changePostControls.js","webpack://@block-cat/default/./src/forum/settings/removePostCount.js","webpack://@block-cat/default/./src/forum/settings/removeReplyPlaceholder.js","webpack://@block-cat/default/./src/forum/settings/removeTerminalPost.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","app","initializers","add","extend","IndexPage","items","defaultSettings","JSON","parse","forum","attribute","params","search","stickyParams","allDiscussionsIcon","has","replace","LinkButton","component","href","route","icon","translator","trans","mainPageMenu","remove","view","toolbar","children","shift","refreshButton","markAllAsReadButton","DiscussionPage","discussionMenu","controlsButton","scrubberDiv","CommentPost","controls","PostControls","this","attrs","post","discussionControlsToPost","number","discussionData","data","relationships","discussion","store","getById","type","id","discussionModerationControls","DiscussionControls","moderationControls","merge","postControlsUp","className","toArray","length","buttonClassName","menuClassName","onshow","$","addClass","onhide","removeClass","override","Post","original","elementAttrs","classes","join","content","listItems","actionItems","footerItems","DiscussionListItem","postCount","pop","Navigation","emoldovaButton","history","pane","onmouseenter","show","onmouseleave","canGoBack","getBackButton","getPaneButton","class","title","active","target","getDrawerButton","PostStream","postReply","map","discuss","terminalPost","disable","element"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/IndexPage'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['components/DiscussionListItem'];","module.exports = flarum.core.compat['utils/PostControls'];","module.exports = flarum.core.compat['components/Dropdown'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['helpers/listItems'];","module.exports = flarum.core.compat['components/Navigation'];","module.exports = flarum.core.compat['components/LinkButton'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['components/Post'];","module.exports = flarum.core.compat['components/PostStream'];","/*\r\n * This function add button to emoldova.org on header on main page\r\n */\r\n\r\nimport { override } from 'flarum/extend';\r\nimport Navigation from 'flarum/components/Navigation';\r\n\r\n// This is emoldova.org button\r\nfunction getEMoldovaButton() {\r\n  return (\r\n    <a class=\"Button Button--icon hasIcon\" href=\"https://emoldova.org/\" title=\"EMoldova\" active=\"false\" type=\"button\" target=\"_self\">\r\n      <i class=\"icon fas fa-home Button-icon\"></i>\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default function () {\r\n  override(Navigation.prototype, 'view', function(original) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    \r\n    // check if is set '1' for EMoldova button\r\n    if (defaultSettings.emoldovaButton) {\r\n      const { history, pane } = app;\r\n      \r\n      // return result\r\n      // like original Flarum code\r\n      return (\r\n        <div\r\n          className={'Navigation ButtonGroup ' + (this.attrs.className || '')}\r\n          onmouseenter={pane && pane.show.bind(pane)}\r\n          onmouseleave={pane && pane.onmouseleave.bind(pane)}\r\n        >\r\n          {/* Add EMoldova button */}\r\n          {history.canGoBack() ? [this.getBackButton(), this.getPaneButton()] : [getEMoldovaButton(), this.getDrawerButton()]}\r\n        </div>\r\n      );\r\n    } else {\r\n      // if is set '0' for EMoldova button\r\n      // return original Flarum code\r\n      return original();\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes leftside pane on discussion page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionPage from 'flarum/components/DiscussionPage';\r\n\r\nexport default function () {\r\n  extend(DiscussionPage.prototype, 'oninit', function() {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    \r\n    // check if is set '1' for pane\r\n    if (defaultSettings.pane) {\r\n      // disable pin button for pane \r\n      app.pane.disable();\r\n    }\r\n  });\r\n\r\n  extend(DiscussionPage.prototype, 'oncreate', function() {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    \r\n    // check if is set '1' for pane\r\n    if (defaultSettings.pane) {\r\n      for (const i of this.element.children) {\r\n        // check classname for pane\r\n        if (i.className === 'DiscussionPage-list') {\r\n            // remove pane with discussions list\r\n            i.remove();\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n","import addEMoldovaButton from './settings/addEMoldovaButton';\r\nimport changeIconFromMenu from './settings/changeIconFromMenu';\r\nimport changePostControls from './settings/changePostControls';\r\nimport removeActionItems from './settings/removeActionItems';\r\nimport removeLeftsideMenu from './settings/removeLeftsideMenu';\r\nimport removePane from './settings/removePane';\r\nimport removePostCount from './settings/removePostCount';\r\nimport removeReplyPlaceholder from './settings/removeReplyPlaceholder';\r\nimport removeRightsideMenu from './settings/removeRightsideMenu';\r\nimport removeSidebarItems from './settings/removeSidebarItems';\r\nimport removeTerminalPost from './settings/removeTerminalPost';\r\nimport removeToolbar from './settings/removeToolbar';\r\n\r\napp.initializers.add('block-cat/default', () => {\r\n  changeIconFromMenu();\r\n  removeLeftsideMenu();\r\n  removeToolbar();\r\n  removeActionItems();\r\n  removeRightsideMenu();\r\n  removeSidebarItems();\r\n  changePostControls();\r\n  removePostCount();\r\n  addEMoldovaButton();\r\n  removeReplyPlaceholder();\r\n  removeTerminalPost();\r\n  removePane();\r\n});\r\n","/*\r\n * This function change icon in sidebar menu for 'allDiscussions'\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport IndexPage from 'flarum/components/IndexPage';\r\nimport LinkButton from 'flarum/components/LinkButton';\r\n\r\nexport default function () {\r\n  extend(IndexPage.prototype, 'navItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    const params = app.search.stickyParams();\r\n    \r\n    // check if is set icon for main page menu\r\n    if (defaultSettings.allDiscussionsIcon !== \"\") {\r\n      // check if exists 'allDiscussions' item\r\n      if (items.has('allDiscussions')) {\r\n        // change 'allDiscussions' item\r\n        items.replace(\r\n          'allDiscussions',\r\n          LinkButton.component(\r\n            {\r\n              href: app.route('index', params),\r\n              // change the icon...\r\n              icon: defaultSettings.allDiscussionsIcon,\r\n            },\r\n            app.translator.trans('core.forum.index.all_discussions_link')\r\n          ),\r\n          100\r\n        );\r\n      }\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes leftside menu from main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport IndexPage from 'flarum/components/IndexPage';\r\n\r\nexport default function () {\r\n  extend(IndexPage.prototype, 'sidebarItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for main page menu\r\n    if (defaultSettings.mainPageMenu) {\r\n      // check if exists 'nav' item\r\n      if (items.has('nav')) {\r\n        // remove 'nav' item\r\n        items.remove('nav');\r\n      }\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes tools bar from top of\r\n * discussions list on main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport IndexPage from 'flarum/components/IndexPage';\r\n\r\nexport default function () {\r\n  extend(IndexPage.prototype, 'view', function(view) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for toolbar\r\n    if (defaultSettings.toolbar) {\r\n      // remove first element from 'view.children[1].children[0].children[1].children'\r\n      view.children[1].children[0].children[1].children.shift();\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes refresh button and\r\n * mark all as read button from top of\r\n * discussions list on main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport IndexPage from 'flarum/components/IndexPage';\r\n\r\nexport default function () {\r\n  extend(IndexPage.prototype, 'actionItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for refresh button\r\n    if (defaultSettings.refreshButton) {\r\n      // check if exists 'refresh' item\r\n      if (items.has('refresh')) {\r\n        // remove 'refresh' item\r\n        items.remove('refresh');\r\n      }\r\n    }\r\n    // check if is set '1' for mark all as read button\r\n    if (defaultSettings.markAllAsReadButton) {\r\n      // check if exists 'markAllAsRead' item\r\n      if (items.has('markAllAsRead')) {\r\n        // remove 'markAllAsRead' item\r\n        items.remove('markAllAsRead');\r\n      }\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes rightside menu from discussion page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionPage from 'flarum/components/DiscussionPage';\r\n\r\nexport default function () {\r\n  extend(DiscussionPage.prototype, 'view', function(view) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    \r\n    // check if is set '1' for dicussion page menu\r\n    if (defaultSettings.discussionMenu) {\r\n      try {\r\n        // remove first element from 'view.children[1].children[1].children'\r\n        view.children[1].children[1].children.shift();\r\n      } catch {}\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes blue button from\r\n * rightside from discussion page and\r\n * what is below to this\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionPage from 'flarum/components/DiscussionPage';\r\n\r\nexport default function () {\r\n  extend(DiscussionPage.prototype, 'sidebarItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for controls button\r\n    if (defaultSettings.controlsButton) {\r\n      // check if exists 'controls' item\r\n      if (items.has('controls')) {\r\n        // remove 'controls' item\r\n        items.remove('controls');\r\n      }\r\n    }\r\n    // check if is set '1' for timeline\r\n    if (defaultSettings.scrubberDiv) {\r\n      // check if exists 'scrubber' item\r\n      if (items.has('scrubber')) {\r\n        // remove 'scrubber' item\r\n        items.remove('scrubber');\r\n      }\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function duplicates Post Controls on header\r\n * if posts are very large and merge Discussion Controls\r\n * with Post Controls for first post in discussion\r\n */\r\n\r\nimport { extend, override } from 'flarum/extend';\r\nimport CommentPost from 'flarum/components/CommentPost';\r\nimport PostControls from 'flarum/utils/PostControls';\r\nimport Dropdown from 'flarum/components/Dropdown';\r\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\r\nimport Post from 'flarum/components/Post';\r\nimport listItems from 'flarum/helpers/listItems';\r\n\r\nexport default function () {\r\n  extend(CommentPost.prototype, 'headerItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    // get all PostControls\r\n    const controls = PostControls.controls(this.attrs.post, this);\r\n\r\n    // check if is set '1' for mergging controls\r\n    if (defaultSettings.discussionControlsToPost) {\r\n      // check if is first post\r\n      if (this.attrs.post.number() === 1) {\r\n        // get type and id of discussion from post info\r\n        const discussionData = this.attrs.post.data.relationships.discussion.data;\r\n        // get current discussion from Flarum API\r\n        const discussion = app.store.getById(discussionData.type, discussionData.id);\r\n        // get moderation controls for current discussion\r\n        const discussionModerationControls = DiscussionControls.moderationControls(discussion);\r\n        \r\n        // remove unneeded controls for discussion\r\n      discussionModerationControls.has('lock') ? discussionModerationControls.remove('lock') : '';\r\n      discussionModerationControls.has('sticky') ? discussionModerationControls.remove('sticky') : '';\r\n\r\n      // change icon for 'rename' control\r\n      discussionModerationControls.has('rename') ? discussionModerationControls.get('rename').attrs.icon = 'fas fa-heading' : '';\r\n\r\n      // merge all controls in one list\r\n      controls.merge(discussionModerationControls);\r\n      }\r\n    }\r\n\r\n    // check if is set '1' for duplication\r\n    if (defaultSettings.postControlsUp) {\r\n      // add item 'controls' on post header\r\n      // like in original Flarum code\r\n      items.add(\r\n        'controls',\r\n        <aside className=\"Post-actions-top\">\r\n          <ul>\r\n            {controls.toArray().length ? (\r\n              <li>\r\n                <Dropdown\r\n                  className=\"Post-controls-h\"\r\n                  buttonClassName=\"Button Button--icon Button--flat\"\r\n                  menuClassName=\"Dropdown-menu--right\"\r\n                  icon=\"fas fa-ellipsis-h\"\r\n                  onshow={() => this.$(\".Post-actions-top\").addClass(\"open\")}\r\n                  onhide={() => this.$(\".Post-actions-top\").removeClass(\"open\")}\r\n                >\r\n                  {controls.toArray()}\r\n                </Dropdown>\r\n              </li>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </ul>\r\n        </aside>\r\n      );\r\n    }\r\n  });\r\n\r\n  override(Post.prototype, 'view', function(original) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n    // code from Flarum\r\n    const attrs = this.elementAttrs();\r\n    attrs.className = this.classes(attrs.className).join(' ');\r\n    // get all PostControls\r\n    const controls = PostControls.controls(this.attrs.post, this);\r\n\r\n    // check if is set '1' for mergging controls\r\n    if (defaultSettings.discussionControlsToPost) {\r\n      // check if is first post\r\n      if (this.attrs.post.number() === 1) {\r\n        // get type and id of discussion from post info\r\n        const discussionData = this.attrs.post.data.relationships.discussion.data;\r\n        // get current discussion from Flarum API\r\n        const discussion = app.store.getById(discussionData.type, discussionData.id);\r\n        // get moderation controls option for current discussion\r\n        const discussionModerationControls = DiscussionControls.moderationControls(discussion);\r\n        \r\n        // remove unneeded controls for discussion\r\n      discussionModerationControls.has('lock') ? discussionModerationControls.remove('lock') : '';\r\n      discussionModerationControls.has('sticky') ? discussionModerationControls.remove('sticky') : '';\r\n\r\n      // change icon for 'rename' control\r\n      discussionModerationControls.has('rename') ? discussionModerationControls.get('rename').attrs.icon = 'fas fa-heading' : '';\r\n\r\n      // merge all controls in one list\r\n      controls.merge(discussionModerationControls);\r\n      }\r\n\r\n      // return result\r\n      // like in original Flarum code\r\n      return (\r\n        <article {...attrs}>\r\n          <div>\r\n            {this.content()}\r\n            <aside className=\"Post-actions\">\r\n              <ul>\r\n                {listItems(this.actionItems().toArray())}\r\n                {controls.toArray().length ? (\r\n                  <li>\r\n                    <Dropdown\r\n                      className=\"Post-controls\"\r\n                      buttonClassName=\"Button Button--icon Button--flat\"\r\n                      menuClassName=\"Dropdown-menu--right\"\r\n                      icon=\"fas fa-ellipsis-h\"\r\n                      onshow={() => this.$('.Post-actions').addClass('open')}\r\n                      onhide={() => this.$('.Post-actions').removeClass('open')}\r\n                    >\r\n                      {controls.toArray()}\r\n                    </Dropdown>\r\n                  </li>\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </ul>\r\n            </aside>\r\n            <footer className=\"Post-footer\">\r\n              <ul>{listItems(this.footerItems().toArray())}</ul>\r\n            </footer>\r\n          </div>\r\n        </article>\r\n      );\r\n    } else {\r\n      // if is set '0' for mergging controls\r\n      // return original Flarum code\r\n      return original();\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes number of posts\r\n * from every discussion on main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionListItem from 'flarum/components/DiscussionListItem';\r\n\r\nexport default function () {\r\n  extend(DiscussionListItem.prototype, 'view', function(view) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for post count\r\n    if (defaultSettings.postCount) {\r\n      // remove last element from 'view.children[2].children'\r\n      view.children[2].children.pop();\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes area for posting from end of posts on discussion page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport PostStream from 'flarum/components/PostStream';\r\n\r\nexport default function () {\r\n  extend(PostStream.prototype, 'view', function(view) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for post reply\r\n    if (defaultSettings.postReply) {\r\n      // map all children of 'view'\r\n      view.children.map((discuss) => {\r\n        // check if exists post with key 'reply'\r\n        if (discuss.key === 'reply') {\r\n          // remove last element from 'view.children'\r\n          view.children.pop();\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n","/*\r\n * This function removes last action info from every discussion on main page\r\n */\r\n\r\nimport { extend } from 'flarum/extend';\r\nimport DiscussionListItem from 'flarum/components/DiscussionListItem';\r\n\r\nexport default function () {\r\n  extend(DiscussionListItem.prototype, 'infoItems', function(items) {\r\n    // get all settings from Flarum API\r\n    const defaultSettings = JSON.parse(app.forum.attribute('block-cat.defaultSettings'));\r\n\r\n    // check if is set '1' for terminal post\r\n    if (defaultSettings.terminalPost) {\r\n      // check if exists 'terminalPost' item\r\n      if (items.has('terminalPost')) {\r\n        // remove 'terminalPost' item\r\n        items.remove('terminalPost');\r\n      }\r\n    }\r\n  });\r\n};\r\n"],"sourceRoot":""}